{"ast":null,"code":"import { vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", null, [_withDirectives(_createElementVNode(\"textarea\", {\n    placeholder: \"Type a message and hit enter to send...\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    onKeypress: _cache[1] || (_cache[1] = _withKeys(_withModifiers((...args) => $setup.handleSubmit && $setup.handleSubmit(...args), [\"prevent\"]), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"div\", _hoisted_1, _toDisplayString($setup.error), 1 /* TEXT */)]);\n}","map":{"version":3,"mappings":";;EAOaA,KAAK,EAAC;AAAO;;uBANtBC,oBAOO,+BANHC,oBAIY;IAHRC,WAAW,EAAG,yCAAyC;+DAC5CC,cAAO;IACjBC,UAAQ,kEAAgBD,mDAAY;iEAD1BA,cAAO,KAGtBF,oBAAoC,OAApCI,UAAoC,mBAAdF,YAAK","names":["class","_createElementBlock","_createElementVNode","placeholder","$setup","onKeypress","_hoisted_1"],"sourceRoot":"","sources":["C:\\Users\\JW\\Desktop\\VUE_JS\\class10\\live-chat-1\\src\\components\\NewChatForm.vue"],"sourcesContent":["<template>\r\n    <form>\r\n        <textarea\r\n            placeholder = 'Type a message and hit enter to send...'\r\n            v-model = \"message\"\r\n            @keypress.enter.prevent=\"handleSubmit\"\r\n        ></textarea>\r\n        <div class=\"error\">{{ error }}</div>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\n    import {ref} from 'vue'\r\n    import getCurrentUser from '../composables/getCurrentUser'\r\n    import { timestamp } from '../firebase/config'\r\n    import useCollection from '../composables/useCollection.js'\r\n\r\n    export default{\r\n        setup(){\r\n            const { user } = getCurrentUser()\r\n            const {addDoc, error} = useCollection('messages')\r\n            const message = ref('')\r\n            const handleSubmit = async () => {\r\n                const chat = {\r\n                    name: user.value.displayName,\r\n                    message: message.value,\r\n                    createdAt: timestamp()\r\n                }\r\n                await addDoc(chat)\r\n                //console.log(chat)\r\n                if(!error.val){\r\n                    message.value=''\r\n                }\r\n            }\r\n            return {message, handleSubmit, error}\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}