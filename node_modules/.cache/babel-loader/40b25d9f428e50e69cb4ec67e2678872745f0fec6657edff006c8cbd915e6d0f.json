{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"copy-div\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\", \"onClick\"];\nconst _hoisted_4 = {\n  class: \"error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_vue_emoji_picker = _resolveComponent(\"vue-emoji-picker\");\n  return _openBlock(), _createElementBlock(\"form\", null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.emojis, (emoji, index) => {\n    return _openBlock(), _createElementBlock(\"input\", {\n      type: \"button\",\n      value: emoji.icon,\n      onClick: $event => _ctx.copy(index)\n    }, null, 8 /* PROPS */, _hoisted_3);\n  }), 256 /* UNKEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"textarea\", {\n    class: \"comment-box\",\n    placeholder: \"Type your best message...\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    onKeypress: _cache[1] || (_cache[1] = _withKeys(_withModifiers((...args) => $setup.handleSubmit && $setup.handleSubmit(...args), [\"prevent\"]), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.message]])]), _createVNode(_component_vue_emoji_picker, {\n    modelValue: $setup.message,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.message = $event)\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.error), 1 /* TEXT */)]);\n}","map":{"version":3,"mappings":";;EAEaA,EAAE,EAAC;AAAK;gCACbC,oBAAyB;EAApBD,EAAE,EAAC;AAAU;;;EASbE,KAAK,EAAC;AAAO;;;uBAXtBC,oBAYO,eAXHF,oBAQM,OARNG,UAQM,GAPNC,UAAyB,qBACzBF,oBAAiGG,6BAA/BC,WAAM,GAAvBC,KAAK,EAAEC,KAAK;yBAA7DN,oBAAiG;MAA1FO,IAAI,EAAC,QAAQ;MAAEC,KAAK,EAAEH,KAAK,CAACI,IAAI;MAAqCC,OAAK,YAAEN,SAAI,CAACE,KAAK;;oDAC7FR,oBAIY;IAJFC,KAAK,EAAC,aAAa;IACzBY,WAAW,EAAG,2BAA2B;+DAC9BC,cAAO;IACjBC,UAAQ,kEAAgBD,mDAAY;iEAD1BA,cAAO,OAItBE,aAAuDC;gBAA5BH,cAAO;+DAAPA,cAAO;2CAClCd,oBAAoC,OAApCkB,UAAoC,mBAAdJ,YAAK","names":["id","_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_ctx","emoji","index","type","value","icon","onClick","placeholder","$setup","onKeypress","_createVNode","_component_vue_emoji_picker","_hoisted_4"],"sourceRoot":"","sources":["C:\\Users\\lego5\\Desktop\\Vue-Project\\Vue-Project\\src\\components\\NewChatForm.vue"],"sourcesContent":["<template>\r\n    <form>\r\n        <div id=\"app\">\r\n        <div id=\"copy-div\"></div>\r\n        <input type=\"button\" :value=\"emoji.icon\" v-for=\"(emoji, index) in emojis\"  @click=\"copy(index)\"/>\r\n        <textarea class=\"comment-box\"\r\n            placeholder = 'Type your best message...'\r\n            v-model = \"message\"\r\n            @keypress.enter.prevent=\"handleSubmit\"\r\n        ></textarea>\r\n        </div> \r\n        <vue-emoji-picker v-model=\"message\"></vue-emoji-picker>\r\n        <div class=\"error\">{{ error }}</div>\r\n    </form>\r\n</template>\r\n\r\n\r\n<script>\r\nimport {ref} from 'vue'\r\nimport EmojiPicker from 'vue-emoji-picker'\r\nimport getCurrentUser from '../composables/getCurrentUser'\r\nimport { timestamp } from '../firebase/config'\r\nimport useCollection from '../composables/useCollection.js'\r\nimport VueEmojiPicker from 'vue-emoji-picker'\r\n\r\nexport default{\r\n    setup(){\r\n        const { user } = getCurrentUser()\r\n        const {addDoc, error} = useCollection('messages')\r\n        const message = ref('')\r\n        const handleSubmit = async () => {\r\n            const chat = {\r\n                name: user.value.displayName,\r\n                message: message.value,\r\n                createdAt: timestamp()\r\n            }\r\n            await addDoc(chat)\r\n            //console.log(chat)\r\n            if(!error.val){\r\n                message.value=''\r\n            }\r\n        }\r\n        return {message, handleSubmit, error}\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n/* Box for commenting */\r\n.comment-box {\r\n    border: 1px solid #ddd;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    box-shadow: 2px 2px 5px #ccc;\r\n    width: 100%;\r\n    height: 200px;\r\n    resize: none;\r\n}\r\n\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}