{"ast":null,"code":"import { vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"emoji-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-smile\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  class: \"error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_vue_emoji_picker = _resolveComponent(\"vue-emoji-picker\");\n  return _openBlock(), _createElementBlock(\"form\", null, [_withDirectives(_createElementVNode(\"textarea\", {\n    class: \"comment-box\",\n    placeholder: \"Type your best message...\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    onKeypress: _cache[1] || (_cache[1] = _withKeys(_withModifiers((...args) => $setup.handleSubmit && $setup.handleSubmit(...args), [\"prevent\"]), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.openEmojiPicker = true),\n    class: \"emoji-button\"\n  }, _hoisted_3), $setup.openEmojiPicker ? (_openBlock(), _createBlock(_component_vue_emoji_picker, {\n    key: 0,\n    modelValue: $setup.message,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.message = $event),\n    onClose: _cache[4] || (_cache[4] = $event => $setup.openEmojiPicker = false)\n  }, null, 8 /* PROPS */, [\"modelValue\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.error), 1 /* TEXT */)]);\n}","map":{"version":3,"mappings":";;EAOaA,KAAK,EAAC;AAAiB;gCAEpBC,oBAA4B;EAAzBD,KAAK,EAAC;AAAc;oBAAvBE,UAA4B;;EAI/BF,KAAK,EAAC;AAAO;;;uBAZtBG,oBAaO,+BAZHF,oBAIY;IAJFD,KAAK,EAAC,aAAa;IACzBI,WAAW,EAAG,2BAA2B;+DAC9BC,cAAO;IACjBC,UAAQ,kEAAgBD,mDAAY;iEAD1BA,cAAO,KAGtBJ,oBAKM,OALNM,UAKM,GAJFN,oBAES;IAFAO,OAAK,sCAAEH,sBAAe;IAASL,KAAK,EAAC;kBAGJK,sBAAe,kBAAzDI,aAA+GC;;gBAApFL,cAAO;+DAAPA,cAAO;IAA0BM,OAAK,sCAAEN,sBAAe;kFAEtFJ,oBAAoC,OAApCW,UAAoC,mBAAdP,YAAK","names":["class","_createElementVNode","_hoisted_2","_createElementBlock","placeholder","$setup","onKeypress","_hoisted_1","onClick","_createBlock","_component_vue_emoji_picker","onClose","_hoisted_4"],"sourceRoot":"","sources":["C:\\Users\\lego5\\Desktop\\Vue-Project\\Vue-Project\\src\\components\\NewChatForm.vue"],"sourcesContent":["<template>\r\n    <form>\r\n        <textarea class=\"comment-box\"\r\n            placeholder = 'Type your best message...'\r\n            v-model = \"message\"\r\n            @keypress.enter.prevent=\"handleSubmit\"\r\n        ></textarea>\r\n        <div class=\"emoji-container\">\r\n            <button @click=\"openEmojiPicker = true\" class=\"emoji-button\">\r\n                <i class=\"fas fa-smile\"></i>\r\n            </button>\r\n            <vue-emoji-picker v-model=\"message\" v-if=\"openEmojiPicker\" @close=\"openEmojiPicker = false\"></vue-emoji-picker>\r\n        </div>\r\n        <div class=\"error\">{{ error }}</div>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport {ref} from 'vue'\r\nimport EmojiPicker from 'vue-emoji-picker'\r\nimport getCurrentUser from '../composables/getCurrentUser'\r\nimport { timestamp } from '../firebase/config'\r\nimport useCollection from '../composables/useCollection.js'\r\nimport VueEmojiPicker from 'vue-emoji-picker'\r\n\r\nexport default{\r\n    setup(){\r\n        const { user } = getCurrentUser()\r\n        const {addDoc, error} = useCollection('messages')\r\n        const message = ref('')\r\n        const openEmojiPicker = ref(false)\r\n        const handleSubmit = async () => {\r\n            const chat = {\r\n                name: user.value.displayName,\r\n                message: message.value,\r\n                createdAt: timestamp()\r\n            }\r\n            await addDoc(chat)\r\n            //console.log(chat)\r\n            if(!error.val){\r\n                message.value=''\r\n            }\r\n        }\r\n        return {message, handleSubmit, error, openEmojiPicker}\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n/* Box for commenting */\r\n.comment-box {\r\n    border: 1px solid #ddd;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    box-shadow: 2px 2px 5px #ccc;\r\n    width: 100%;\r\n    height: 200px;\r\n    resize: none;\r\n}\r\n.emoji-button {\r\n    border: none;\r\n    background-color: transparent;\r\n    font-size: 1.5rem;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}